"use strict";(self.webpackChunkopen_bank_doc=self.webpackChunkopen_bank_doc||[]).push([[7911],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return u}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var o=r.createContext({}),c=function(t){var e=r.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},l=function(t){var e=c(t.components);return r.createElement(o.Provider,{value:e},t.children)},y={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,o=t.parentName,l=p(t,["components","mdxType","originalType","parentName"]),g=c(n),u=a,d=g["".concat(o,".").concat(u)]||g[u]||y[u]||i;return n?r.createElement(d,s(s({ref:e},l),{},{components:n})):r.createElement(d,s({ref:e},l))}));function u(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,s=new Array(i);s[0]=g;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:a,s[1]=p;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8020:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return g}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],p={sidebar_position:9},o="\u0425\u0430\u0432\u0441\u0440\u0430\u043b\u0442 1",c={unversionedId:"havsralt-1",id:"havsralt-1",isDocsHomePage:!1,title:"\u0425\u0430\u0432\u0441\u0440\u0430\u043b\u0442 1",description:"| \u0421\u0435\u0440\u0432\u0438\u0441 \u043d\u044d\u0440                                 | \u0422\u0430\u0439\u043b\u0431\u0430\u0440 |",source:"@site/docs/havsralt-1.md",sourceDirName:".",slug:"/havsralt-1",permalink:"/open-banking/docs/havsralt-1",editUrl:"https://github.com/hulgeebnaa/open-banking/docs/havsralt-1.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"\u0421\u0430\u043b\u0431\u0430\u0440\u044b\u043d \u0436\u0430\u0433\u0441\u0430\u0430\u043b\u0442 \u0430\u0432\u0430\u0445",permalink:"/open-banking/docs/section-8/section-8-3"}},l=[{value:"\u0416\u0438\u0448\u044d\u044d \u0445\u04af\u0441\u044d\u043b\u0442 \u0438\u043b\u0433\u044d\u044d\u0445",id:"\u0436\u0438\u0448\u044d\u044d-\u0445\u04af\u0441\u044d\u043b\u0442-\u0438\u043b\u0433\u044d\u044d\u0445",children:[]},{value:"\u0416\u0410\u0412\u0410 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0447\u043b\u0430\u043b\u044b\u043d \u0445\u044d\u043b \u0434\u044d\u044d\u0440 \u0436\u0438\u0448\u044d\u044d \u043a\u043e\u0434:",id:"\u0436\u0430\u0432\u0430-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0447\u043b\u0430\u043b\u044b\u043d-\u0445\u044d\u043b-\u0434\u044d\u044d\u0440-\u0436\u0438\u0448\u044d\u044d-\u043a\u043e\u0434",children:[]}],y={toc:l};function g(t){var e=t.components,n=(0,a.Z)(t,s);return(0,i.kt)("wrapper",(0,r.Z)({},y,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u0445\u0430\u0432\u0441\u0440\u0430\u043b\u0442-1"},"\u0425\u0430\u0432\u0441\u0440\u0430\u043b\u0442 1"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"\u0421\u0435\u0440\u0432\u0438\u0441 \u043d\u044d\u0440"),(0,i.kt)("th",{parentName:"tr",align:null},"\u0422\u0430\u0439\u043b\u0431\u0430\u0440"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"LGIN"),(0,i.kt)("td",{parentName:"tr",align:null},"\u041d\u044d\u0432\u0442\u0440\u044d\u0445 \u0441\u0435\u0440\u0432\u0438\u0441")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ACCTINQ"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0414\u0430\u043d\u0441\u043d\u044b \u0434\u044d\u043b\u0433\u044d\u0440\u044d\u043d\u0433\u04af\u0439")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ACCTSTA"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0414\u0430\u043d\u0441\u043d\u044b \u0445\u0443\u0443\u043b\u0433\u0430")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"RETCUSTINQ"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0418\u0440\u0433\u044d\u043d \u0445\u0430\u0440\u0438\u043b\u0446\u0430\u0433\u0447\u0438\u0439\u043d \u043c\u044d\u0434\u044d\u044d\u043b\u044d\u043b \u0445\u0430\u0440\u0430\u0445")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DBCRDORD"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0414\u0435\u0431\u0438\u0442 \u043a\u0430\u0440\u0442 \u0437\u0430\u0445\u0438\u0430\u043b\u0430\u0445")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SOLINQ"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0421\u0430\u043b\u0431\u0430\u0440\u044b\u043d \u0436\u0430\u0433\u0441\u0430\u0430\u043b\u0442 \u0430\u0432\u0430\u0445")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CUSTIMGUP"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0425\u0430\u0440\u0438\u043b\u0446\u0430\u0433\u0447\u0438\u0439\u043d \u0437\u0443\u0440\u0430\u0433 \u0445\u0443\u0443\u043b\u0430\u0445")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"RETCUSTADD"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0418\u0440\u0433\u044d\u043d \u0445\u0430\u0440\u0438\u043b\u0446\u0430\u0433\u0447 \u0431\u04af\u0440\u0442\u0433\u044d\u0445")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CORPCUSTADD"),(0,i.kt)("td",{parentName:"tr",align:null},"\u0411\u0430\u0439\u0433\u0443\u0443\u043b\u043b\u0430\u0433\u0430 \u0431\u04af\u0440\u0442\u0433\u044d\u0445")))),(0,i.kt)("h2",{id:"\u0436\u0438\u0448\u044d\u044d-\u0445\u04af\u0441\u044d\u043b\u0442-\u0438\u043b\u0433\u044d\u044d\u0445"},"\u0416\u0438\u0448\u044d\u044d \u0445\u04af\u0441\u044d\u043b\u0442 \u0438\u043b\u0433\u044d\u044d\u0445"),(0,i.kt)("h2",{id:"\u0436\u0430\u0432\u0430-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0447\u043b\u0430\u043b\u044b\u043d-\u0445\u044d\u043b-\u0434\u044d\u044d\u0440-\u0436\u0438\u0448\u044d\u044d-\u043a\u043e\u0434"},"\u0416\u0410\u0412\u0410 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0447\u043b\u0430\u043b\u044b\u043d \u0445\u044d\u043b \u0434\u044d\u044d\u0440 \u0436\u0438\u0448\u044d\u044d \u043a\u043e\u0434:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Hex;\n\npublic class AESEncrypt {\n    public static final String DEFAULT_TYPE = "base64";\n    public static String HEX = "hex";\n    private final String type;\n    private String sessionKey;\n    private String ivKey;\n\n    public AESEncrypt() {\n        this.type = "base64";\n    }\n\n    public AESEncrypt(String type, String sessionKey, String ivKey) {\n        this.type = type;\n        this.sessionKey = sessionKey;\n        this.ivKey = ivKey;\n    }\n\n    public String getEncryption(String string) {\n        return getEncryption(this.type, string, this.sessionKey, this.ivKey);\n    }\n\n    public static String getEncryption(String string, String sessionKey, String ivKey) {\n        return getEncryption("base64", string, sessionKey, ivKey);\n    }\n\n    public static String getEncryption(String type, String string, String sessionKey, String ivKey) {\n        try {\n            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");\n            byte[] bytes = string.getBytes(StandardCharsets.UTF_8);\n            SecretKeySpec keySpec = new SecretKeySpec(sessionKey.getBytes(StandardCharsets.UTF_8), "AES");\n            IvParameterSpec ivParameterSpec = new IvParameterSpec(ivKey.getBytes(StandardCharsets.UTF_8));\n            cipher.init(1, keySpec, ivParameterSpec);\n            byte[] byteCipherText = cipher.doFinal(bytes);\n            return getStringFromBytes(type, byteCipherText);\n        } catch (Exception var9) {\n            var9.printStackTrace();\n            return null;\n        }\n    }\n\n    public String getDecryption(String string) {\n        return getDecryption(this.type, string, this.sessionKey, this.ivKey);\n    }\n\n    public static String getDecryption(String string, String sessionKey, String ivKey) {\n        return getDecryption("base64", string, sessionKey, ivKey);\n    }\n\n    public static String getDecryption(String type, String string, String sessionKey, String ivKey) {\n        try {\n            if (string != null && !"".equals(string)) {\n                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");\n                SecretKeySpec keySpec = new SecretKeySpec(sessionKey.getBytes(StandardCharsets.UTF_8), "AES");\n                IvParameterSpec ivParameterSpec = new IvParameterSpec(ivKey.getBytes(StandardCharsets.UTF_8));\n                cipher.init(2, keySpec, ivParameterSpec);\n                byte[] bytePlainText = cipher.doFinal(getBytesFromString(type, string));\n                return new String(bytePlainText, StandardCharsets.UTF_8);\n            } else {\n                return string;\n            }\n        } catch (Exception var8) {\n            var8.printStackTrace();\n            return null;\n        }\n    }\n\n    private static byte[] getBytesFromString(String type, String string) throws DecoderException {\n        return type.equals("base64") ? Base64.getMimeDecoder().decode(string.getBytes(StandardCharsets.UTF_8)) : Hex.decodeHex(string);\n    }\n\n    private static String getStringFromBytes(String type, byte[] bytes) {\n        return type.equals("base64") ? new String(Base64.getEncoder().encode(bytes), StandardCharsets.UTF_8) : Hex.encodeHexString(bytes);\n    }\n}\n')))}g.isMDXComponent=!0}}]);